// This file is @generated by wasmcloud/weld-codegen 0.6.0.
// It is not intended for manual editing.
// namespace: jammin.interfaces.oauth2

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct AuthorizeUserRequest {
    /// OAuth2 Options: AuthorizationCode, PKCE, Refresh, ClientCredentials, DeviceCode
    #[serde(default)]
    pub grant_type: String,
    #[serde(default)]
    pub auth_code: String,
    #[serde(default)]
    pub state: String,
    #[serde(default)]
    pub csrf_state: String,
}

// Encode AuthorizeUserRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_authorize_user_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &AuthorizeUserRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(4)?;
    e.str(&val.grant_type)?;
    e.str(&val.auth_code)?;
    e.str(&val.state)?;
    e.str(&val.csrf_state)?;
    Ok(())
}

// Decode AuthorizeUserRequest from cbor input stream
#[doc(hidden)]
pub fn decode_authorize_user_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<AuthorizeUserRequest, RpcError> {
    let __result = {
        let mut grant_type: Option<String> = None;
        let mut auth_code: Option<String> = None;
        let mut state: Option<String> = None;
        let mut csrf_state: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct AuthorizeUserRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => grant_type = Some(d.str()?.to_string()),
                    1 => auth_code = Some(d.str()?.to_string()),
                    2 => state = Some(d.str()?.to_string()),
                    3 => csrf_state = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "grant_type" => grant_type = Some(d.str()?.to_string()),
                    "auth_code" => auth_code = Some(d.str()?.to_string()),
                    "state" => state = Some(d.str()?.to_string()),
                    "csrf_state" => csrf_state = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        AuthorizeUserRequest {
            grant_type: if let Some(__x) = grant_type {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserRequest.grant_type (#0)".to_string(),
                ));
            },

            auth_code: if let Some(__x) = auth_code {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserRequest.auth_code (#1)".to_string(),
                ));
            },

            state: if let Some(__x) = state {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserRequest.state (#2)".to_string(),
                ));
            },

            csrf_state: if let Some(__x) = csrf_state {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserRequest.csrf_state (#3)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct AuthorizeUserResponse {
    /// indication whether the request was successful
    #[serde(default)]
    pub success: bool,
    /// If success is false, this may contain an error
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(default)]
    pub access_token: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refresh_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    #[serde(default)]
    pub expire: u64,
    #[serde(default)]
    pub scope: String,
}

// Encode AuthorizeUserResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_authorize_user_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &AuthorizeUserResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(8)?;
    e.bool(val.success)?;
    if let Some(val) = val.error.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str(&val.access_token)?;
    if let Some(val) = val.refresh_token.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.user_id.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.device_id.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.u64(val.expire)?;
    e.str(&val.scope)?;
    Ok(())
}

// Decode AuthorizeUserResponse from cbor input stream
#[doc(hidden)]
pub fn decode_authorize_user_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<AuthorizeUserResponse, RpcError> {
    let __result = {
        let mut success: Option<bool> = None;
        let mut error: Option<Option<String>> = Some(None);
        let mut access_token: Option<String> = None;
        let mut refresh_token: Option<Option<String>> = Some(None);
        let mut user_id: Option<Option<String>> = Some(None);
        let mut device_id: Option<Option<String>> = Some(None);
        let mut expire: Option<u64> = None;
        let mut scope: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct AuthorizeUserResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => success = Some(d.bool()?),
                    1 => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => access_token = Some(d.str()?.to_string()),
                    3 => {
                        refresh_token = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    4 => {
                        user_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    5 => {
                        device_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    6 => expire = Some(d.u64()?),
                    7 => scope = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "success" => success = Some(d.bool()?),
                    "error" => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "access_token" => access_token = Some(d.str()?.to_string()),
                    "refresh_token" => {
                        refresh_token = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "user_id" => {
                        user_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "device_id" => {
                        device_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "expire" => expire = Some(d.u64()?),
                    "scope" => scope = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        AuthorizeUserResponse {
            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserResponse.success (#0)".to_string(),
                ));
            },
            error: error.unwrap(),

            access_token: if let Some(__x) = access_token {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserResponse.access_token (#2)".to_string(),
                ));
            },
            refresh_token: refresh_token.unwrap(),
            user_id: user_id.unwrap(),
            device_id: device_id.unwrap(),

            expire: if let Some(__x) = expire {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserResponse.expire (#6)".to_string(),
                ));
            },

            scope: if let Some(__x) = scope {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AuthorizeUserResponse.scope (#7)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct GetAuthUrlRequest {
    /// OAuth2 Options: AuthorizationCode, PKCE, Refresh, ClientCredentials, DeviceCode
    #[serde(default)]
    pub grant_type: String,
    #[serde(default)]
    pub client_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    #[serde(default)]
    pub auth_url: String,
    #[serde(default)]
    pub token_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect_url: Option<String>,
    #[serde(default)]
    pub scope: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_auth_url: Option<String>,
}

// Encode GetAuthUrlRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_get_auth_url_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &GetAuthUrlRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(9)?;
    e.str(&val.grant_type)?;
    e.str(&val.client_id)?;
    if let Some(val) = val.device_code.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.client_secret.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str(&val.auth_url)?;
    e.str(&val.token_url)?;
    if let Some(val) = val.redirect_url.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str(&val.scope)?;
    if let Some(val) = val.device_auth_url.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode GetAuthUrlRequest from cbor input stream
#[doc(hidden)]
pub fn decode_get_auth_url_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<GetAuthUrlRequest, RpcError> {
    let __result = {
        let mut grant_type: Option<String> = None;
        let mut client_id: Option<String> = None;
        let mut device_code: Option<Option<String>> = Some(None);
        let mut client_secret: Option<Option<String>> = Some(None);
        let mut auth_url: Option<String> = None;
        let mut token_url: Option<String> = None;
        let mut redirect_url: Option<Option<String>> = Some(None);
        let mut scope: Option<String> = None;
        let mut device_auth_url: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct GetAuthUrlRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => grant_type = Some(d.str()?.to_string()),
                    1 => client_id = Some(d.str()?.to_string()),
                    2 => {
                        device_code = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    3 => {
                        client_secret = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    4 => auth_url = Some(d.str()?.to_string()),
                    5 => token_url = Some(d.str()?.to_string()),
                    6 => {
                        redirect_url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    7 => scope = Some(d.str()?.to_string()),
                    8 => {
                        device_auth_url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "grant_type" => grant_type = Some(d.str()?.to_string()),
                    "client_id" => client_id = Some(d.str()?.to_string()),
                    "device_code" => {
                        device_code = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "client_secret" => {
                        client_secret = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "auth_url" => auth_url = Some(d.str()?.to_string()),
                    "token_url" => token_url = Some(d.str()?.to_string()),
                    "redirect_url" => {
                        redirect_url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "scope" => scope = Some(d.str()?.to_string()),
                    "device_auth_url" => {
                        device_auth_url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        GetAuthUrlRequest {
            grant_type: if let Some(__x) = grant_type {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetAuthUrlRequest.grant_type (#0)".to_string(),
                ));
            },

            client_id: if let Some(__x) = client_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetAuthUrlRequest.client_id (#1)".to_string(),
                ));
            },
            device_code: device_code.unwrap(),
            client_secret: client_secret.unwrap(),

            auth_url: if let Some(__x) = auth_url {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetAuthUrlRequest.auth_url (#4)".to_string(),
                ));
            },

            token_url: if let Some(__x) = token_url {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetAuthUrlRequest.token_url (#5)".to_string(),
                ));
            },
            redirect_url: redirect_url.unwrap(),

            scope: if let Some(__x) = scope {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetAuthUrlRequest.scope (#7)".to_string(),
                ));
            },
            device_auth_url: device_auth_url.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct GetAuthUrlResponse {
    #[serde(default)]
    pub success: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default)]
    pub csrf_state: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_code_expire: Option<u64>,
}

// Encode GetAuthUrlResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_get_auth_url_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &GetAuthUrlResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(7)?;
    e.bool(val.success)?;
    if let Some(val) = val.error.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.url.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str(&val.csrf_state)?;
    if let Some(val) = val.device_url.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.device_code.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.device_code_expire.as_ref() {
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode GetAuthUrlResponse from cbor input stream
#[doc(hidden)]
pub fn decode_get_auth_url_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<GetAuthUrlResponse, RpcError> {
    let __result = {
        let mut success: Option<bool> = None;
        let mut error: Option<Option<String>> = Some(None);
        let mut url: Option<Option<String>> = Some(None);
        let mut csrf_state: Option<String> = None;
        let mut device_url: Option<Option<String>> = Some(None);
        let mut device_code: Option<Option<String>> = Some(None);
        let mut device_code_expire: Option<Option<u64>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct GetAuthUrlResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => success = Some(d.bool()?),
                    1 => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => {
                        url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    3 => csrf_state = Some(d.str()?.to_string()),
                    4 => {
                        device_url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    5 => {
                        device_code = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    6 => {
                        device_code_expire = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "success" => success = Some(d.bool()?),
                    "error" => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "url" => {
                        url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "csrf_state" => csrf_state = Some(d.str()?.to_string()),
                    "device_url" => {
                        device_url = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "device_code" => {
                        device_code = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "device_code_expire" => {
                        device_code_expire = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        GetAuthUrlResponse {
            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetAuthUrlResponse.success (#0)".to_string(),
                ));
            },
            error: error.unwrap(),
            url: url.unwrap(),

            csrf_state: if let Some(__x) = csrf_state {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetAuthUrlResponse.csrf_state (#3)".to_string(),
                ));
            },
            device_url: device_url.unwrap(),
            device_code: device_code.unwrap(),
            device_code_expire: device_code_expire.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct UnauthorizeUserRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
}

// Encode UnauthorizeUserRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_unauthorize_user_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &UnauthorizeUserRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(2)?;
    if let Some(val) = val.user_id.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.device_id.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode UnauthorizeUserRequest from cbor input stream
#[doc(hidden)]
pub fn decode_unauthorize_user_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<UnauthorizeUserRequest, RpcError> {
    let __result = {
        let mut user_id: Option<Option<String>> = Some(None);
        let mut device_id: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct UnauthorizeUserRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        user_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => {
                        device_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "user_id" => {
                        user_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "device_id" => {
                        device_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        UnauthorizeUserRequest {
            user_id: user_id.unwrap(),
            device_id: device_id.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct UnauthorizeUserResponse {
    /// indication whether the request was successful
    #[serde(default)]
    pub success: bool,
    /// If success is false, this may contain an error
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

// Encode UnauthorizeUserResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_unauthorize_user_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &UnauthorizeUserResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(2)?;
    e.bool(val.success)?;
    if let Some(val) = val.error.as_ref() {
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode UnauthorizeUserResponse from cbor input stream
#[doc(hidden)]
pub fn decode_unauthorize_user_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<UnauthorizeUserResponse, RpcError> {
    let __result = {
        let mut success: Option<bool> = None;
        let mut error: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct UnauthorizeUserResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => success = Some(d.bool()?),
                    1 => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "success" => success = Some(d.bool()?),
                    "error" => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        UnauthorizeUserResponse {
            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UnauthorizeUserResponse.success (#0)".to_string(),
                ));
            },
            error: error.unwrap(),
        }
    };
    Ok(__result)
}
/// The Oauth2 service has 3 Operations: To Authorize the user with OAuth Provider, To Remove Authorization, and to get the initial /Authorize URI
/// wasmbus.contractId: jammin:interfaces:oauth2
/// wasmbus.providerReceive
/// wasmbus.actorReceive
#[async_trait]
pub trait Oauth2 {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "jammin:interfaces:oauth2"
    }
    async fn authorize_user(
        &self,
        ctx: &Context,
        arg: &AuthorizeUserRequest,
    ) -> RpcResult<AuthorizeUserResponse>;
    async fn unauthorize_user(
        &self,
        ctx: &Context,
        arg: &UnauthorizeUserRequest,
    ) -> RpcResult<UnauthorizeUserResponse>;
    async fn get_auth_url(
        &self,
        ctx: &Context,
        arg: &GetAuthUrlRequest,
    ) -> RpcResult<GetAuthUrlResponse>;
}

/// Oauth2Receiver receives messages defined in the Oauth2 service trait
/// The Oauth2 service has 3 Operations: To Authorize the user with OAuth Provider, To Remove Authorization, and to get the initial /Authorize URI
#[doc(hidden)]
#[async_trait]
pub trait Oauth2Receiver: MessageDispatch + Oauth2 {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "AuthorizeUser" => {
                let value: AuthorizeUserRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'AuthorizeUserRequest': {}", e)))?;

                let resp = Oauth2::authorize_user(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "UnauthorizeUser" => {
                let value: UnauthorizeUserRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'UnauthorizeUserRequest': {}", e)))?;

                let resp = Oauth2::unauthorize_user(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "GetAuthUrl" => {
                let value: GetAuthUrlRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'GetAuthUrlRequest': {}", e)))?;

                let resp = Oauth2::get_auth_url(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Oauth2::{}",
                message.method
            ))),
        }
    }
}

/// Oauth2Sender sends messages to a Oauth2 service
/// The Oauth2 service has 3 Operations: To Authorize the user with OAuth Provider, To Remove Authorization, and to get the initial /Authorize URI
/// client for sending Oauth2 messages
#[derive(Debug)]
pub struct Oauth2Sender<T: Transport> {
    transport: T,
}

impl<T: Transport> Oauth2Sender<T> {
    /// Constructs a Oauth2Sender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> Oauth2Sender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl Oauth2Sender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}

#[cfg(target_arch = "wasm32")]
impl Oauth2Sender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Oauth2 provider
    /// implementing the 'jammin:interfaces:oauth2' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "jammin:interfaces:oauth2",
            "default",
        )
        .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Oauth2 provider
    /// implementing the 'jammin:interfaces:oauth2' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "jammin:interfaces:oauth2",
            link_name,
        )?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Oauth2 for Oauth2Sender<T> {
    #[allow(unused)]
    async fn authorize_user(
        &self,
        ctx: &Context,
        arg: &AuthorizeUserRequest,
    ) -> RpcResult<AuthorizeUserResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Oauth2.AuthorizeUser",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: AuthorizeUserResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': AuthorizeUserResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn unauthorize_user(
        &self,
        ctx: &Context,
        arg: &UnauthorizeUserRequest,
    ) -> RpcResult<UnauthorizeUserResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Oauth2.UnauthorizeUser",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: UnauthorizeUserResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': UnauthorizeUserResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn get_auth_url(
        &self,
        ctx: &Context,
        arg: &GetAuthUrlRequest,
    ) -> RpcResult<GetAuthUrlResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Oauth2.GetAuthUrl",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: GetAuthUrlResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': GetAuthUrlResponse", e)))?;
        Ok(value)
    }
}
